using Chroma.Audio;
using System;

namespace ChromaSynth
{
    public enum SynthWaveform { Sine, Triangle, Square, Sawtooth }

    public abstract class Waveform
    {
        private float volume;

        /// <summary>
        /// The amplitude of the wave. Float between 0.0 and 1.0.
        /// </summary>
        public float Volume
        {
            get { return volume; }
            set { volume = value < 0 ? 0 : value > 1 ? 1 : value; }
        }

        private float frequency;

        /// <summary>
        /// The frequency of the wave. Float above 0.0.
        /// </summary>
        public float Frequency
        {
            get { return frequency; }
            set { frequency = value < 0 ? 0 : value; }
        }

        private float leftRightBalance = 0.5f;

        /// <summary>
        /// Balance between left and right stereo channels. Float between 0.0 and 1.0.
        /// Defaults to 0.5, which is equivalent to a Mono sound.
        /// Higher values shift balance to the right, lower values to the left.
        /// </summary>
        public float LeftRightBalance
        {
            get { return leftRightBalance; }
            set { leftRightBalance = value < 0 ? 0 : value > 1 ? 1 : value; }
        }

        public readonly SynthWaveform WaveformType;

        /// <summary>
        /// An array of floats containing all samples, which can be used for visualization. Modifying this array does not affect Chunk Generation!
        /// </summary>
        public float[] Samples = new float[0];

        protected readonly float TimePerChunk = 0.0f;
        protected readonly float ChunksPerSecond = 0.0f;
        protected readonly float SampleSize = sizeof(float);

        protected AudioManager AudioManager;

        public Waveform(AudioManager audioManager, SynthWaveform waveformType, float frequency, float volume = 1.0f)
        {
            AudioManager = audioManager;
            Frequency = frequency;
            Volume = volume > 1 ? 1.0f : volume < 0 ? 0 : volume;
            WaveformType = waveformType;

            TimePerChunk = audioManager.ChunkSize / SampleSize / audioManager.SamplingRate;
            ChunksPerSecond = 1.0f / TimePerChunk;

            Samples = new float[audioManager.ChunkSize * 2];
        }

        /// <summary>
        /// Generates a chunk and writes the values directly to the given parameter.
        /// </summary>
        /// <param name="chunk">A reference to the Float Span representing the wave chunk.</param>
        public void GenerateChunk(ref Span<float> chunk)
        {
            Span<float> genChunk = new Span<float>(GenerateSamples());
            for (int i = 0; i < genChunk.Length; i++)
                chunk[i] = chunk[i] + genChunk[i] > 1 ? 1 : chunk[i] + genChunk[i];
        }

        /// <summary>
        /// Returns a float array containing samples generated by the Waveform. Useful if additional modification of the samples is required.
        /// The GenerateChunk() method also uses this.
        /// </summary>
        /// <returns>Array of samples as Float</returns>
        public abstract float[] GenerateSamples();
    }
}
